{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
     "baseUrl": {
         "type": "string"
     },
     "location": {
         "type": "string"
     },
     "imageName": {
          "type": "string"
     },
     "instanceType": {
          "type": "string"
     },
     "adminUsername": {
          "type": "string"
     },
     "adminPassword": {
          "type": "securestring"
     },
     "dnsLabel": {
          "type": "string"
     },
     "commandArgs": {
          "type": "string"
     }
  },
  "variables": {
     "f5CloudLibsTag": "v2.1.0",
     "singleQuote": "'",       
     "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) a6a9db3b89bbd014413706f22fa619c3717fac41fc99ffe875589c90e9b85a05cea227c134ea6e5b519c8fee0d12f2175368e75917f31f447ece3d92f31814af\n            set hashes(f5-cloud-libs-aws.tar.gz) 90058095cc536a057378a90ed19c3afe0cecd9034e1d1816745bd5ad837939623fad034ebd2ee9bdf594f33358b50c50f49a18c2ee7588ba89645142f2217330\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature OmyfJKVQkBj+Ks6SdIc2+UNxM2xFCK4MGizGysivShzeRof0EFlEUTQiZveZ4v2SElofUp5DMVKiTIIkM00kZ7LnwqvLYIOztDFNAtMGwO6/B/zA8jLhkfnA2xzxu9fFgFn3OEsc8QwbfFS1AqCMyyacbbiczJycHtu3z0a/8sqCgiZtcQ4iXqBP4fz+8HKLA36U0jpmW+z0gQQUwpiC+AfFWcAarXMtmpwLzScldnaZ5RLo0MG8EGrHmXiWjndSR/Ii9b3+vnHnceD6+sw7e7LXPvz+jV9/rFyEQOA1QNpv0Cy4SJcuY9NRjV9KNdBobJ5N+h2PZBlgaIdLMACAVQ==\n}', variables('singleQuote'))]",   
     "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit\nfi\necho loaded verifyHash\necho verifying f5-cloud-libs.targ.gz\n/usr/bin/tmsh run cli script verifyHash /config/f5-cloud-libs.tar.gz\nif [ $? != 0 ]; then\necho f5-cloud-libs.tar.gz is not valid\nexit\nfi\necho verified f5-cloud-libs.tar.gz\necho expanding f5-cloud-libs.tar.gz\ntar xvfz /config/f5-cloud-libs.tar.gz -C /config\ntouch /config/cloudLibsReady', variables('singleQuote'))]",
     "apiVersionStorage": "2015-06-15",
     "apiVersionCompute": "2016-03-30",
     "ipAddress": "10.10.1.",
     "nicNamePrefix": "[concat(parameters('dnsLabel'),'-nic')]",
     "availabilitySetName": "[concat(parameters('dnsLabel'),'-as')]",
     "newStorageAccountName": "[concat(uniquestring(concat(resourceGroup().id, 'st')), 'st')]",
     "diagStorageAccountName": "[concat(uniquestring(concat(resourceGroup().id, 'diag')), 'diag')]",
     "wafNamePrefix": "[concat(parameters('dnsLabel'),'-waf')]"
  },
  "resources": [
       {
               "apiVersion": "[variables('apiVersionCompute')]",
               "type": "Microsoft.Compute/virtualMachines",
               "name": "[concat(variables('wafNamePrefix'),0)]",
               "location": "[parameters('location')]",
               "tags": {
                    "displayName": "VirtualMachine"
               },
               "dependsOn": [
               ],
               "plan": {
                    "name": "[parameters('imageName')]",
                    "publisher": "f5-networks",
                    "product": "f5-web-application-firewall"
                },
               "properties": {
                    "availabilitySet": {
                         "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
                    },
                    "hardwareProfile": {
                         "vmSize": "[parameters('instanceType')]"
                    },
                    "osProfile": {
                         "computerName": "[concat(variables('wafNamePrefix'),0)]",
                         "adminUsername": "[parameters('adminUsername')]",
                         "adminPassword": "[parameters('adminPassword')]"
                    },
                    "storageProfile": {
                         "imageReference": {
                            "publisher": "f5-networks",
                              "offer": "f5-web-application-firewall",
                              "sku": "[parameters('imageName')]",
                              "version": "12.1.22"
                        },
                         "osDisk": {
                              "name": "[concat(variables('wafNamePrefix'),'osdisk',0)]",
                              "vhd": {                                 
                                   "uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('newStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), variables('wafNamePrefix'), 0, '.vhd')]"
                              },
                              "caching": "ReadWrite",
                              "createOption": "FromImage"
                         }
                    },
                    "networkProfile": {
                         "networkInterfaces": [
                              {
                                   "id": "[concat(resourceId('Microsoft.Network/networkInterfaces',variables('nicNamePrefix')),0)]"
                              }
                         ]
                    },
                    "diagnosticsProfile": {
                         "bootDiagnostics": {
                              "enabled": true,
                              "storageUri": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('diagStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints['blob']]"
                         }
                    }
               }
          },
          {
               "type": "Microsoft.Compute/virtualMachines/extensions",
               "name": "[concat(variables('wafNamePrefix'),0,'/start')]",
               "apiVersion": "[variables('apiVersionCompute')]",
               "location": "[parameters('location')]",
               "dependsOn": [
                    "[concat('Microsoft.Compute/virtualMachines/',variables('wafNamePrefix'),0)]"
               ],
               "properties": {
                    "publisher": "Microsoft.Azure.Extensions",
                    "type": "CustomScript",
                    "typeHandlerVersion": "2.0",
                    "autoUpgradeMinorVersion":"true",
                    "settings": {
                         "fileUris": [
                              "[concat(parameters('baseUrl'), '/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]",
                              "[concat(parameters('baseUrl'), '/deploy_waf_t2.sh')]",
                              "[concat(parameters('baseUrl'), '/f5.policy_creator_t2.tmpl')]",
                              "[concat(parameters('baseUrl'), '/f5.asm_log_creator_t2.tmpl')]",
                              "[concat(parameters('baseUrl'), '/f5.http.v1.2.0rc7.tmpl')]",
                              "[concat(parameters('baseUrl'), '/asm-policy-linux-high.xml')]",
                              "[concat(parameters('baseUrl'), '/asm-policy-linux-medium.xml')]",
                              "[concat(parameters('baseUrl'), '/asm-policy-linux-low.xml')]",
                              "[concat(parameters('baseUrl'), '/asm-policy-linux-off.xml')]",
                              "[concat(parameters('baseUrl'), '/asm-policy-windows-high.xml')]",
                              "[concat(parameters('baseUrl'), '/asm-policy-windows-medium.xml')]",
                              "[concat(parameters('baseUrl'), '/asm-policy-windows-low.xml')]",
                              "[concat(parameters('baseUrl'), '/asm-policy-windows-off.xml')]"
                         ]
                    },
                    "protectedSettings": {
                         "commandToExecute": "[concat('cp f5-cloud-libs.tar.gz* /config; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; /usr/bin/install -b -m 400 /dev/null /config/mypass; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; echo -e ', parameters('adminPassword'), ' >> /config/mypass; unset IFS; bash /config/installCloudLibs.sh; /usr/bin/f5-rest-node /config/f5-cloud-libs/scripts/azure/runScripts.js --log-level debug --onboard \" --output /var/log/onboard.log --log-level debug --host ', concat(variables('ipAddress'), 4), ' -u admin --password-url file:///config/mypass --hostname ', concat(variables('wafNamePrefix'), 0, '.azuresecurity.com'), ' --ntp pool.ntp.org --tz UTC --db provision.1nicautoconfig:disable --db tmm.maxremoteloglength:2048 --module ltm:nominal --module asm:nominal --module afm:none --signal ONBOARD_DONE \" --script \" --wait-for ONBOARD_DONE --output /var/log/deployScript.log --log-level debug --file /var/lib/waagent/custom-script/download/0/deploy_waf_t2.sh --cl-args ', variables('singleQuote'), parameters('commandArgs'), variables('singleQuote'), ' --signal DEPLOY_SCRIPT_DONE \" ')]"
                    }
               }
          }
  ],
  "outputs": {}
}