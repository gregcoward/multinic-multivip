{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apiVersionCompute": {
      "type": "string",
      "metadata": {
        "description": "The compute api version"
      }
    },
    "apiVersionNetwork": {
      "type": "string",
      "metadata": {
        "description": "The network api version"
      }
    },
    "apiVersionStorage": {
      "type": "string",
      "metadata": {
        "description": "The storage api version"
      }
    },
    "f5NamePrefix": {
      "type": "string"
    },
    "baseUrl": {
      "type": "string"
    },
    "location": {
      "type": "string"
    },
    "instanceType": {
      "type": "string"
    },
    "licenseKey1": {
      "type": "string",
      "metadata": {
        "description": "Only required if BYOL selected."
      }
    },
    "licenseKey2": {
      "type": "string",
      "metadata": {
        "description": "Only required if BYOL and 2 instances selected."
      }
    },
    "adminUsername": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring"
    },
    "publicIpName": {
      "type": "string"
    },
    "mgmtIpAddress": {
      "type": "string"
    },
    "mgmtSubnetRef": {
      "type": "string"
    },
    "intIpAddress": {
      "type": "string"
    },
    "intSubnetRef": {
      "type": "string"
    },
    "extIpAddress": {
      "type": "string"
    },
    "extSubnetRef": {
      "type": "string"
    },
    "nicNamePrefix": {
      "type": "string"
    },
    "nsgID": {
      "type": "string"
    },
    "numberOfInstances": {
      "type": "int"
    },
    "numCopies": {
      "type": "int"
    },
    "loadBalancerName": {
      "type": "string"
    },
    "imageName": {
      "type": "string"
    },
    "licensedBandwidth": {
      "type": "string"
    },
    "virtualNetworkName": {
      "type": "string"
    },
    "availabilitySetName": {
      "type": "string"
    },
    "newStorageAccountName": {
      "type": "string"
    },
    "diagStorageAccountName": {
      "type": "string"
    }
  },
  "variables": {
    "f5CloudLibsTag": "v2.1.0",
    "runScripts": "runScripts.js",
    "runScriptsUrl": "[concat(parameters('baseUrl'), '/', variables('runScripts'))]",
    "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) a6a9db3b89bbd014413706f22fa619c3717fac41fc99ffe875589c90e9b85a05cea227c134ea6e5b519c8fee0d12f2175368e75917f31f447ece3d92f31814af\n            set hashes(f5-cloud-libs-aws.tar.gz) 90058095cc536a057378a90ed19c3afe0cecd9034e1d1816745bd5ad837939623fad034ebd2ee9bdf594f33358b50c50f49a18c2ee7588ba89645142f2217330\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature OmyfJKVQkBj+Ks6SdIc2+UNxM2xFCK4MGizGysivShzeRof0EFlEUTQiZveZ4v2SElofUp5DMVKiTIIkM00kZ7LnwqvLYIOztDFNAtMGwO6/B/zA8jLhkfnA2xzxu9fFgFn3OEsc8QwbfFS1AqCMyyacbbiczJycHtu3z0a/8sqCgiZtcQ4iXqBP4fz+8HKLA36U0jpmW+z0gQQUwpiC+AfFWcAarXMtmpwLzScldnaZ5RLo0MG8EGrHmXiWjndSR/Ii9b3+vnHnceD6+sw7e7LXPvz+jV9/rFyEQOA1QNpv0Cy4SJcuY9NRjV9KNdBobJ5N+h2PZBlgaIdLMACAVQ==\n}', variables('singleQuote'))]",
    "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit\nfi\necho loaded verifyHash\necho verifying f5-cloud-libs.targ.gz\n/usr/bin/tmsh run cli script verifyHash /config/f5-cloud-libs.tar.gz\nif [ $? != 0 ]; then\necho f5-cloud-libs.tar.gz is not valid\nexit\nfi\necho verified f5-cloud-libs.tar.gz\necho expanding f5-cloud-libs.tar.gz\ntar xvfz /config/f5-cloud-libs.tar.gz -C /config\ntouch /config/cloudLibsReady', variables('singleQuote'))]",
    "f5CloudLibsTagUrl": "[concat(parameters('baseUrl'),'/f5-cloud-libs/', variables('f5CloudLibsTag'), '/v2.1.0/dist/f5-cloud-libs.tar.gz')]",
    "publicIPID1": "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('publicIpName'),'-1'))]",
    "publicIPID2": "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('publicIpName'),'-2'))]",
    "publicIPID3": "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('publicIpName'),'-3'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd-mgmt')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',parameters('loadBalancerName'))]",
    "guiMgtID": "[concat(variables('lbID'),'/inboundNatRules/guimgt')]",
    "sshMgtID": "[concat(variables('lbID'),'/inboundNatRules/sshmgt')]",
    "singleQuote": "'",
    "defaultGw": "[concat(parameters('extIpAddress'),'1')]",
    "imageName": "[concat('f5-bigip-virtual-edition-', toLower(parameters('imageName')),'-best-hourly')]",
    "imageNameToLower": "[toLower(parameters('imageName'))]", 
    "skuToUse": "[concat('f5-bigip-virtual-edition-', parameters('licensedBandwidth'), '-', variables('imageNameToLower'),'-hourly')]" 
  },
  "resources": [
    {
      "apiVersion": "[parameters('apiVersionNetwork')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "copy": {
        "count": "[add(parameters('numCopies'), 1)]",
        "name": "copycount"
      },
      "name": "[concat(parameters('publicIpName'),'-',copyIndex(1))]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "PublicIPAddress"
      },
      "properties": {
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('publicIPName'),'-',copyindex(1))]"
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersionNetwork')]",
      "type": "Microsoft.Network/loadBalancers",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('publicIPName'),'-', add(parameters('numCopies'),1))]"
      ],
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "LoadBalancer"
      },
      "name": "[parameters('loadBalancerName')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd-mgmt",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPID1')]"
              }
            }
          },
          {
            "name": "loadBalancerFrontEnd-data1",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPID2')]"
              }
            }
          },
          {
            "name": "loadBalancerFrontEnd-data2",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPID3')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd-mgmt"
          },
          {
            "name": "loadBalancerBackEnd-data1"
          },
          {
            "name": "loadBalancerBackEnd-data2"
          }
        ],
        "loadBalancingRules": [
          {
            "Name": "data1-http-80",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd-data1')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd-data1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/probes/tcp-80')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "idleTimeoutInMinutes": 15
            }
          },
          {
            "Name": "data2-http-80",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd-data2')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd-data2')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/probes/tcp-80')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "idleTimeoutInMinutes": 15
            }
          },
          {
            "Name": "data1-http-443",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd-data1')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd-data1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/probes/tcp-443')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "idleTimeoutInMinutes": 15
            }
          },
          {
            "Name": "data2-http-443",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd-data2')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd-data2')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/probes/tcp-443')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "idleTimeoutInMinutes": 15
            }
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "tcp-80"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "tcp-443"
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersionNetwork')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(parameters('loadBalancerName'),'/guimgt', copyIndex(1))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "lbNatLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', parameters('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8443)]",
        "backendPort": 8443,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[parameters('apiVersionNetwork')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(parameters('loadBalancerName'),'/sshmgt', copyIndex(1))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "lbNatLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', parameters('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8022)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[parameters('apiVersionNetwork')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('nicNamePrefix'),'-mgmt-',copyindex(1))]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "NetworkInterface"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', parameters('loadBalancerName'))]",
        "[concat('Microsoft.Network/loadBalancers/', parameters('loadBalancerName'),'/inboundNatRules/guimgt',copyindex(1))]",
        "[concat('Microsoft.Network/loadBalancers/', parameters('loadBalancerName'),'/inboundNatRules/sshmgt',copyindex(1))]"
      ],
      "copy": {
        "count": "[parameters('numberOfInstances')]",
        "name": "niccopy"
      },
      "properties": {
        "networkSecurityGroup": {
          "id": "[parameters('nsgID')]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(parameters('mgmtIpAddress'),copyindex(4))]",
              "subnet": {
                "id": "[parameters('mgmtSubnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/', 'loadBalancerBackEnd-mgmt')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'), '/inboundNatRules/', 'guimgt',copyIndex(1))]"
                },
                {
                  "id": "[concat(variables('lbID'), '/inboundNatRules/', 'sshmgt',copyIndex(1))]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersionNetwork')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('nicNamePrefix'),'-int-',copyindex(1))]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "NetworkInterface"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', parameters('loadBalancerName'))]"
      ],
      "copy": {
        "count": "[parameters('numberOfInstances')]",
        "name": "niccopy"
      },
      "properties": {
        "networkSecurityGroup": {
          "id": "[parameters('nsgID')]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(parameters('intIpAddress'),copyindex(4))]",
              "subnet": {
                "id": "[parameters('intSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersionNetwork')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('nicNamePrefix'),'-data-',copyindex(1))]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "NetworkInterface"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', parameters('loadBalancerName'))]"
      ],
      "copy": {
        "count": "[parameters('numberofInstances')]",
        "name": "niccopy"
      },
      "properties": {
        "networkSecurityGroup": {
          "id": "[parameters('nsgID')]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "static",
              "privateIPAddress": "[concat(parameters('extIpAddress'),copyIndex(1),'1')]",
              "primary": true,
              "subnet": {
                "id": "[parameters('extSubnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/', 'loadBalancerBackEnd-data1')]"
                }
              ]
            }
          },
          {
            "name": "ipconfig2",
            "properties": {
              "privateIPAllocationMethod": "static",
              "privateIPAddress": "[concat(parameters('extIpAddress'),copyIndex(1),'2')]",
              "primary": false,
              "subnet": {
                "id": "[parameters('extSubnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/', 'loadBalancerBackEnd-data2')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersionCompute')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('f5NamePrefix'),copyIndex(1))]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "VirtualMachine"
      },
      "copy": {
        "count": "[parameters('numberofInstances')]",
        "name": "niccopy"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('nicNamePrefix'),'-mgmt-',copyindex(1))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('nicNamePrefix'),'-int-',copyindex(1))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('nicNamePrefix'),'-data-',copyindex(1))]"
      ],
      "plan": {
        "name":  "[variables('skuToUse')]", 
        "publisher": "f5-networks",
        "product": "f5-big-ip-hourly"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',parameters('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('f5NamePrefix'),copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "f5-networks",
            "offer": "f5-big-ip-hourly",
            "sku": "[variables('skuToUse')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('f5NamePrefix'),'osdisk',copyIndex(1))]",
            "vhd": {
              "uri": "[concat(concat(reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', parameters('newStorageAccountName')), parameters('apiVersionStorage')).primaryEndpoints['blob'], 'vhds/'), parameters('f5NamePrefix'), copyIndex(1), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[concat(resourceId('Microsoft.Network/networkInterfaces',parameters('nicNamePrefix')),'-mgmt-',copyIndex(1))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[concat(resourceId('Microsoft.Network/networkInterfaces',parameters('nicNamePrefix')),'-int-',copyIndex(1))]",
              "properties": {
                "primary": false
              }
            },
            {
              "id": "[concat(resourceId('Microsoft.Network/networkInterfaces',parameters('nicNamePrefix')),'-data-',copyIndex(1))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', parameters('diagStorageAccountName')), parameters('apiVersionStorage')).primaryEndpoints['blob']]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('f5NamePrefix'),'1','/start')]",
      "apiVersion": "[parameters('apiVersionCompute')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('f5NamePrefix'),'1'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "autoUpgradeMinorVersion": true,
        "typeHandlerVersion": "2.0",
        "settings": {
          "fileUris": [
            "[variables('f5CloudLibsTagUrl')]",
             "[variables('runScriptsUrl')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('cp f5-cloud-libs.tar.gz* /config; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; /usr/bin/install -b -m 400 /dev/null /config/mypass; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; echo -e ', parameters('adminPassword'), ' >> /config/mypass; unset IFS; bash /config/installCloudLibs.sh; /usr/bin/f5-rest-node /config/f5-cloud-libs/scripts/azure/runScripts.js --log-level debug --onboard \" --output /var/log/onboard.log --log-level debug --host ', parameters('mgmtIpAddress'), '4 -ssl-port 8443 -u admin --password-url file:///config/mypass --hostname ', concat(parameters('f5NamePrefix'),'1', '.azure.com'), ' --ntp pool.ntp.org --tz UTC --db tmm.maxremoteloglength:2048 --module ltm:nominal --module asm:nominal --module afm:none --signal ONBOARD_DONE \" --network \" --output /var/log/network.log --host ', parameters('mgmtIpAddress'), '4 --port 8443 -u admin --password-url file:///config/mypass --multi-nic --default-gw ', variables('defaultGw'), ' --vlan internal,1.1 --vlan external,1.2 --self-ip internalSelf,', parameters('intIpAddress'), '4,internal --self-ip ext_vip1,', parameters('extIpAddress'),'11,external --self-ip ext_vip2,', parameters('extIpAddress'),'12,external --log-level debug --force-reboot; rm -f /config/cloud/passwd --signal NETWORK_DONE \" --cluster \" --wait-for ONBOARD_DONE --output /var/log/clusterGroup.log --log-level debug --host ', reference(concat(parameters('nicNamePrefix'),'-mgmt-1')).ipConfigurations[0].properties.privateIpAddress, ' -u admin --password-url file:///config/mypass --create-group --device-group Sync --sync-type sync-failover --device ', concat(parameters('f5NamePrefix'),'1', '.azure.com'), ' --auto-sync --save-on-auto-sync --asm-sync --config-sync-ip ', reference(concat(parameters('nicNamePrefix'),'-int-1')).ipConfigurations[0].properties.privateIpAddress,' --signal CLUSTER_DONE \"')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('f5NamePrefix'),copyIndex(2),'/start')]",
      "apiVersion": "[parameters('apiVersionCompute')]",
      "location": "[parameters('location')]",
      "copy": {
        "count": "[sub(parameters('numberofInstances'),1)]",
        "name": "niccopy"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('f5NamePrefix'),copyIndex(2)))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "autoUpgradeMinorVersion": true,
        "typeHandlerVersion": "2.0",
        "settings": {
          "fileUris": [
            "[variables('f5CloudLibsTagUrl')]",
             "[variables('runScriptsUrl')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('cp f5-cloud-libs.tar.gz* /config; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; /usr/bin/install -b -m 400 /dev/null /config/mypass; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; echo -e ', parameters('adminPassword'), ' >> /config/mypass; unset IFS; bash /config/installCloudLibs.sh; /usr/bin/f5-rest-node /config/f5-cloud-libs/scripts/azure/runScripts.js --log-level debug --onboard \" --output /var/log/onboard.log --log-level debug --host ', parameters('mgmtIpAddress'), '5 -ssl-port 8443 -u admin --password-url file:///config/mypass --hostname ', concat(parameters('f5NamePrefix'),'2', '.azure.com'), ' --ntp pool.ntp.org --tz UTC --db tmm.maxremoteloglength:2048 --module ltm:nominal --module asm:nominal --module afm:none --signal ONBOARD_DONE \" --network \" --output /var/log/network.log --host ', parameters('mgmtIpAddress'), '5 --port 8443 -u admin --password-url file:///config/mypass --multi-nic --default-gw ', variables('defaultGw'), ' --vlan internal,1.1 --vlan external,1.2 --self-ip internalSelf,', parameters('intIpAddress'), '5,internal --self-ip ext_vip1,', parameters('extIpAddress'),'21,external --self-ip ext_vip2,', parameters('extIpAddress'),'22,external --log-level debug --force-reboot; rm -f /config/cloud/passwd --signal NETWORK_DONE \"--cluster \" --wait-for ONBOARD_DONE --output /var/log/cluster.log --log-level debug --host ', reference(concat(parameters('nicNamePrefix'),'-mgmt-2')).ipConfigurations[0].properties.privateIpAddress, ' -u admin --password-url file:///config/mypass --config-sync-ip ', reference(concat(parameters('nicNamePrefix'),'-int-2')).ipConfigurations[0].properties.privateIpAddress, ' --join-group --device-group Sync --sync --remote-host ', reference(concat(parameters('nicNamePrefix'),'-mgmt-1')).ipConfigurations[0].properties.privateIpAddress, ' --remote-user admin --remote-password-url file:///config/mypass --signal CLUSTER_DONE \"')]"
        }
      }
    }
  ],
  "outputs": { }
}